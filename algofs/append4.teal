#pragma version 5
//PREAMBLE
txn RekeyTo
global ZeroAddress
!=
bnz retfail

txn OnCompletion
int DeleteApplication
==
bnz retok

txn OnCompletion
int UpdateApplication
==
bnz retok

txn ApplicationID
int 0
==
bnz retok
txna ApplicationArgs 0
byte "append"
==
bnz append
return
err

retok: // success/fail functions
int 1
return
retfail:
int 0
return
// END PREAMBLE

//APPEND: takes the second argument and appends it to the end of the globvar array
append:
//#1. find the end of the globvars
//#2. write the argument to the end of them
//1
int 0
next_key: // Stack: Int(NEXT_UNOCCUPIED_KEY)
int 0
swap
dup // Stack: APPLICATION_ID Int(NEXT_POSSIBLE_OCCUPIED_KEY) Int(NEXT_POSSIBLE_OCCUPIED_KEY)
cover 2  // Stack:  Int(NEXT_POBBILE_OCCUPIED_KEY) APPLICATION_ID Int(NEXT_POSSIBLE_OCCUPIED_KEY)
itob
app_global_get_ex
bz done_finding_keys
len
int 120
<
bnz done_finding_keys_with_data
int 1
+ // Stack: Int(NEXT_POSSIBLE_OCCUPIED_KEY)
b next_key
done_finding_keys:  // Stack: Int(NEXT_POSSIBLE_OCCUPIED_KEY)
pop
done_finding_keys_with_data:
itob // Stack: Bytes(LAST_POSSIBLE_OCCUPIED_KEY)
//2
dup
int 0
swap
app_global_get_ex
swap
pop
bnz append_data
dup
byte ""
app_global_put
append_data: // Stack: Bytes(LAST_OCCUPIED_KEY)
dup
app_global_get
len 
int 120
swap
-  // Bytes(LAST_OCCUPIED_KEY) Int(BYTES_FREE_IN_LAST_OCCUPIED_KEY) 
txna ApplicationArgs 1
len // Bytes(LAST_OCCUPIED_KEY) Int(BYTES_FREE_IN_LAST_OCCUPIED_KEY) Int(LENGTH_OF_STRING_TO_APPEND)
dig 1  // Bytes(LAST_OCCUPIED_KEY) Int(BYTES_FREE_IN_LAST_OCCUPIED_KEY) Int(LENGTH_OF_STRING_TO_APPEND) Int(BYTES_FREE_IN_LAST_OCCUPIED_KEY) Int(LENGTH_OF_STRING_TO_APPEND)
dig 1   // Bytes(LAST_OCCUPIED_KEY) Int(BYTES_FREE_IN_LAST_OCCUPIED_KEY) Int(LENGTH_OF_STRING_TO_APPEND) Int(BYTES_FREE_IN_LAST_OCCUPIED_KEY) Int(LENGTH_OF_STRING_TO_APPEND)
>  // Bytes(LAST_OCCUPIED_KEY) Int(BYTES_FREE_IN_LAST_OCCUPIED_KEY) Int(LENGTH_OF_STRING_TO_APPEND) Int(IS_APPENDED_STRING_SHORT)
select  // Bytes(LAST_OCCUPIED_KEY) Int(BYTES_TO_WRITE_IN_LAST_OCCUPIED_KEY)
dup
cover 2 // stash BYTES_TO_WRITE_IN_LAST_OCCUPIED_KEY
swap  //  Int(BYTES_TO_WRITE_IN_LAST_OCCUPIED_KEY) Bytes(LAST_OCCUPIED_KEY)
txna ApplicationArgs 1
int 0 // Int(BYTES_TO_WRITE_IN_LAST_OCCUPIED_KEY) Bytes(LAST_OCCUPIED_KEY)  Bytes(APPLICATION_ARG_1) Int(0)
uncover 3 // Bytes(LAST_OCCUPIED_KEY)  Bytes(APPLICATION_ARG_1) Int(0) Int(BYTES_TO_WRITE_IN_LAST_OCCUPIED_KEY)
extract3  // Bytes(LAST_OCCUPIED_KEY)  Bytes(FIRST_CHUNK_OF_STRING_TO_WRITE)
swap      // Bytes(FIRST_CHUNK_OF_STRING_TO_WRITE) Bytes(LAST_OCCUPIED_KEY)
dup     // Bytes(FIRST_CHUNK_OF_STRING_TO_WRITE) Bytes(LAST_OCCUPIED_KEY)
cover 2  // Bytes(LAST_OCCUPIED_KEY) Bytes(FIRST_CHUNK_OF_STRING_TO_WRITE) Bytes(LAST_OCCUPIED_KEY)
app_global_get   // Bytes(LAST_OCCUPIED_KEY) Bytes(FIRST_CHUNK_OF_STRING_TO_WRITE) Bytes(LAST_OCCUPIED_KEY_DATA)
swap    // Bytes(LAST_OCCUPIED_KEY) Bytes(LAST_OCCUPIED_KEY_DATA) Bytes(FIRST_CHUNK_OF_STRING_TO_WRITE) 
concat // Bytes(LAST_OCCUPIED_KEY) Bytes(CHUNK_TO_WRITE)
swap
dup
cover 2
swap
app_global_put  // Int(BYTES_WRITTEN_IN_LAST_OCCUPIED_KEY) Bytes(LAST_OCCUPIED_KEY)
pop
pop
int 1  // Int(LAST_OCCUPIED_KEY)

// END APPEND FUNCTION